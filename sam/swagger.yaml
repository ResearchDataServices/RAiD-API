# NOTE: Replace <<region>> and <<account>> fields
---
swagger: "2.0"
info:
  title: RAiD API
  version: "1.1.2"
  description: "The Data LifeCycle Framework (DLCF – www.dlc.edu.au ) has been initiated by five primary  organisations; Australian Access Federation (AAF), Australia’s Academic and Research Network (AARNet), Australian National Data Service (ANDS), National eResearch Collaboration Tools and Resources (NeCTAR) and Research Data Services (RDS).\n\n The DLCF is a nationwide effort to connect research resources and activities such that researchers can make the best use of existing national, state-based, local, and commercial eResearch tools. It aims to provide a simple path to reliable provenance, more effective collaboration across organisations and assist researchers to position themselves to address the growing potential of increasingly open data.\n\n The DLCF will connect critical elements and points in time of the data journey from grant approval through to project finalisation, results publication and archiving. It will leverage existing eResearch investment to provide a flexible and dynamic national framework supporting research.\n\n The Resource and Activity Persistent identifier(RAiD) is the first of the enabling technologies required for the DLCF. This specification document is for the development of the RAiD service and supporting features. Learn more about the RAiD project by visiting the website (https://www.raid.org.au/)."
tags:
- name: "Auth"
- name: "RAiD Public"
- name: "RAiD"
- name: "Owner"
- name: "Provider"
- name: "Institution"
- name: "CORS"
schemes:
- https
paths:
  /:
    get:
      summary: "Get API version metadata"
      tags:
      - "RAiD Public"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/APIVersionModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\"version\": \"1.1.2\"}"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /handle/{raidId}:
    get:
      summary: "Return the public information for RAiD"
      tags:
      - "RAiD Public"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - name: "demo"
        in: "query"
        required: false
        description: "(Default False) Do not include attached RAiD providers unless value is set to false"
        type: "boolean"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RAiDPublicModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidPublicFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /handle/{raidId}/redirect:
    get:
      summary: "Public redirect call the the content path of a RAiD"
      tags:
      - "RAiD Public"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - name: "demo"
        in: "query"
        required: false
        description: "(Default False) Do not include attached RAiD providers unless value is set to false"
        type: "boolean"
      responses:
        307:
          description: "307 Redirect"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
            location:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.RedirectRaidContentPathFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /auth:
    post:
      summary: "Authenticate a JWT token and get the base64 decoded object"
      tags:
      - "Auth"
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - in: "body"
        required: false
        name: "body"
        schema:
          $ref: "#/definitions/RAiDAuthModel"
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/RAiDAuthResponseModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.AuthenticateTokenFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD:
    get:
      summary: "Return a list of RAiDs that the user owns or is associated to"
      tags:
      - "RAiD"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "owner"
        in: "query"
        required: false
        type: "boolean"
        description: "Include RAiDs owned"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The maximum number of items to return"
      - name: "ascending"
        in: "query"
        required: false
        type: "boolean"
        description: "Order list by in ascending order (most recently created first)"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
        description: "Key of the last item returned in a previous query to be used for large lists and pagination"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidsFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    post:
      summary: "Generate a RAiD with a unique URL handle"
      tags:
      - "RAiD"
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - in: "body"
        required: false
        name: "body"
        description: "Minting path and other optional parameters that are stored in the RAiD. 'meta' can take any valid JSON object with a 'name' and 'description inside recommended."
        schema:
          $ref: "#/definitions/RAiDCreateModel"
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/RAiDModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CreateRaidFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD/{raidId}:
    get:
      summary: "Return an entire RAiD object with attached metadata and associated providers (optional)"
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - name: "lazy_load"
        in: "query"
        required: false
        description: "(Default True) Do not include attached RAiD providers unless value is set to false"
        type: "boolean"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RAiDModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    put:
      summary: "Update the content path of a RAiD and mint the new path with the ANDS Service"
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - in: "body"
        required: true
        name: "body"
        description: "New content url path to mint with ANDS"
        schema:
            $ref: "#/definitions/UpdateRAiDModel"
      responses:
        200:
          description: "200 response"
          schema:
           $ref: "#/definitions/RAiDModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.UpdateRaidFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD/{raidId}/institutions:
    get:
      summary: "Return a list of institutions associated with a RAiD"
      tags:
      - "Institution"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The maximum number of items to return"
      - name: "ascending"
        in: "query"
        required: false
        type: "boolean"
        description: "Order list by in ascending order (most recently created first)"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
        description: "Key of the last item returned in a previous query to be used for large lists and pagination"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/InstitutionRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidInstitutionsFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    post:
      summary: "Associate an institution to a RAiD and set a start date"
      tags:
      - "Institution"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - in: "body"
        required: false
        name: "body"
        description: "Optional parameters that are added when a provider joins a RAiD"
        schema:
          $ref: "#/definitions/CreateAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AssociatedEntityModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CreateRaidInstitutionAssociationFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Remove an associated institution from a RAiD by setting an end date to the relationship"
      tags:
      - "Institution"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - in: "body"
        required: false
        name: "body"
        description: "Optional parameters that are used when removing a provider"
        schema:
          $ref: "#/definitions/EndEntityAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AssociatedEntityModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.EndRaidInstitutionAssociationFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD/{raidId}/providers:
    get:
      summary: "Return a list of providers associated with a RAiD"
      tags:
      - "Provider"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The maximum number of items to return"
      - name: "ascending"
        in: "query"
        required: false
        type: "boolean"
        description: "Order list by in ascending order (most recently created first)"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
        description: "Key of the last item returned in a previous query to be used for large lists and pagination"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ProviderRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidProvidersFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    post:
      summary: "Associate a provider to a RAiD and set a start date"
      tags:
      - "Provider"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - in: "body"
        required: false
        name: "body"
        description: "Optional parameters that are added when a provider joins a RAiD"
        schema:
          $ref: "#/definitions/CreateAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AssociatedEntityModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CreateRaidProviderAssociationFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    delete:
      summary: "Remove an associated provider from a RAiD by setting an end date to the relationship"
      tags:
      - "Provider"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - in: "body"
        required: false
        name: "body"
        description: "Optional parameters that are used when removing a provider"
        schema:
          $ref: "#/definitions/EndEntityAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/AssociatedEntityModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.EndRaidProviderAssociationFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /owner:
    get:
      summary: "Return a list of RAiDs that are currently owned to the authenticated key"
      tags:
      - "Owner"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The maximum number of items to return"
      - name: "ascending"
        in: "query"
        required: false
        type: "boolean"
        description: "Order list by in ascending order (most recently created first)"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
        description: "Key of the last item returned in a previous query to be used for large lists and pagination"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetOwnerRaidsFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /owner/{raidId}:
    put:
      summary: "Change the ownership of a RAiD to another provider"
      tags:
      - "Owner"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
        description: "RAiD handle created by minting service. Example: 10378.1/1590366"
      - in: "body"
        required: true
        name: "body"
        description: "Provider name to transfer ownership too"
        schema:
            $ref: "#/definitions/OwnerAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
           $ref: "#/definitions/RAiDModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.UpdateRaidOwnerFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /providers:
    get:
      summary: "Return a list of providers registered with RAiD"
      tags:
      - "Provider"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The maximum number of items to return"
      - name: "ascending"
        in: "query"
        required: false
        type: "boolean"
        description: "Order list by in ascending order (most recently created first)"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
        description: "Key of the last item returned in a previous query to be used for large lists and pagination"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/EntitiesModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetProvidersFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /institutions:
    get:
      summary: "Return a list of institutions registered with RAiD"
      tags:
      - "Institution"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "integer"
        description: "The maximum number of items to return"
      - name: "ascending"
        in: "query"
        required: false
        type: "boolean"
        description: "Order list by in ascending order (most recently created first)"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
        description: "Key of the last item returned in a previous query to be used for large lists and pagination"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/EntitiesModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetInstitutionsFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock

securityDefinitions:
  CustomAuthorizerJwt:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerCredentials: "arn:aws:iam::<<account>>:role/${stageVariables.CustomAuthorizerRole}"
      authorizerResultTtlInSeconds: 300
      identityValidationExpression: "^Bearer [A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+\\\
          /=]*$"
      authorizerUri: "arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CustomAuthorizer}/invocations"
      type: "token"
definitions:
  Empty:
    type: object
    title: Empty Schema
  APIVersionModel:
    type: "object"
    properties:
      version:
        type: "string"
    description: "API Version Summary"
  RAiDModel:
    type: "object"
    properties:
      owner:
        type: "string"
        description: "Provider that created the RAiD handle"
      startDate:
        type: "string"
        description: "RAiD start datetime (yyyy-MM-dd hh:mm:ss), which will default to the current datetime if none is supplied"
      endDate:
        type: "string"
        description: "(optional) RAiD end Datetime (yyyy-MM-dd hh:mm:ss)"
      creationDate:
        type: "string"
        description: "RAiD created datetime (yyyy-MM-dd hh:mm:ss)"
      handle:
        type: "string"
        description: "Unique minted ANDS handle"
      contentPath:
        type: "string"
        description: "URL path minted with ANDS"
      contentIndex:
        type: "string"
        description: "Index of URL path ANDS handle"
      providers:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          type: "object"
          properties:
            startDate:
              type: "string"
              description: "Datetime the provider associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            endDate:
              type: "string"
              description: "(optional) Datetime the provider dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            name:
              type: "string"
              description: "Name of provider"
      institutions:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          type: "object"
          properties:
            startDate:
              type: "string"
              description: "Datetime the provider associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            endDate:
              type: "string"
              description: "(optional) Datetime the provider dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            name:
              type: "string"
              description: "Name of Institution"
      meta:
        type: "object"
        description: "(optional) Object that acts as a document for optional metadata KeyValues"
        properties:
          name:
            type: "string"
            description: "A name alias for the RAiD"
          description:
            type: "string"
            description: "A short description of the RAiD"
  ProviderRAiDsModel:
    type: "object"
    properties:
      count:
        type: "string"
        description: "Number of items returned"
      items:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          $ref: "#/definitions/AssociatedEntityModel"
      scannedCount:
        type: "string"
        description: "Total number of items that were scanned in the query"
  RAiDCreateModel:
    type: "object"
    properties:
      contentPath:
        type: "string"
        description: "URL path minted with ANDS"
      startDate:
        type: "string"
        description: "RAiD start datetime (yyyy-MM-dd hh:mm:ss), which will default to the current datetime if none is supplied"
      meta:
        type: "object"
        description: "(optional) Object that acts as a document for optional metadata KeyValues"
        properties:
          name:
            type: "string"
            description: "A name alias for the RAiD"
          description:
            type: "string"
            description: "A short description of the RAiD"
  UpdateRAiDModel:
    type: "object"
    properties:
      name:
        type: "string"
        description: "A name alias for the RAiD that is stored in the metadata"
      description:
        type: "string"
        description: "A short description of the RAiD that is stored in the metadata"
      contentPath:
        type: "string"
        description: "URL path minted with ANDS"
  AssociatedEntityModel:
    type: "object"
    properties:
      startDate:
        type: "string"
        description: "Datetime the provider associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
      endDate:
        type: "string"
        description: "(optional) Datetime the provider dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
      name:
        type: "string"
        description: "Name of entity"
  CreateAssociationModel:
    type: "object"
    properties:
      startDate:
        type: "string"
        description: "Datetime the provider associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
      name:
        type: "string"
        description: "Name of the entity"
  EndEntityAssociationModel:
    type: "object"
    properties:
      endDate:
        type: "string"
        description: "Datetime the provider dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
      name:
        type: "string"
        description: "Name of the entity"
  OwnerAssociationModel:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Name of the entity"
  InstitutionRAiDsModel:
    type: "object"
    properties:
      count:
        type: "string"
        description: "Number of items returned"
      items:
        type: "array"
        description: "(optional) Institutions associated to the RAiD"
        items:
          $ref: "#/definitions/AssociatedEntityModel"
      scannedCount:
        type: "string"
        description: "Total number of items that were scanned in the query"
  RAiDPublicModel:
    type: "object"
    properties:
      creationDate:
        type: "string"
        description: "RAiD created datetime (yyyy-MM-dd hh:mm:ss)"
      handle:
        type: "string"
        description: "Unique minted ANDS handle"
      contentPath:
        type: "string"
        description: "URL path minted with ANDS"
  RAiDAuthModel:
    type: "object"
    properties:
      token:
        type: "string"
        description: "JSON Web Token"
  RAiDAuthResponseModel:
    type: "object"
    properties:
      sub:
        type: "string"
        description: "Subject of the JWT (Standard field)"
      iss:
        type: "string"
        description: "Principal that issued the JWT (Standard field)"
      environment:
        type: "string"
        description: "RAiD environment token is linked to (Custom field)"
      role:
        type: "string"
        description: "RAiD user type token is linked to (Custom field); 'service' or 'institution'"
      exp:
        type: "string"
        description: "Expiration time on or after which the JWT must not be accepted for processing (Standard field)"
      iat:
        type: "string"
        description: "Time at which the JWT was issued (Standard field)"
      aud:
        type: "string"
        description: "Where the JWT is intended for (Standard field)"
  RAiDsModel:
    type: "object"
    properties:
      count:
        type: "string"
        description: "Number of items returned"
      items:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          $ref: "#/definitions/AssociationModel"
      scannedCount:
        type: "string"
        description: "Total number of items that were scanned in the query"
  AssociationModel:
    type: "object"
    properties:
      raidName:
        type: "string"
        description: "Name/Alias of the RAiD"
      handle:
        type: "string"
        description: "Unique minted ANDS handle"
      startDate:
        type: "string"
        description: "Datetime the entity associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
      endDate:
        type: "string"
        description: "(optional) Datetime the entity dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
  EntitiesModel:
    type: "object"
    properties:
      count:
        type: "string"
        description: "Number of items returned"
      items:
        type: "array"
        items:
          type: "object"
          properties:
            name:
              type: "string"
              description: "Provider that created the RAiD handle"
            grid:
              type: "string"
              description: "RAiD start datetime (yyyy-MM-dd hh:mm:ss), which will default to the current datetime if none is supplied"
            isni:
              type: "string"
              description: "RAiD created datetime (yyyy-MM-dd hh:mm:ss)"
      scannedCount:
        type: "string"
        description: "Total number of items that were scanned in the query"
