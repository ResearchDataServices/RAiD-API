# NOTE: Replace <<region>> and <<account>> fields
---
swagger: "2.0"
info:
  title: RAiD API
  version: "3.0-Alpha"
tags:
- name: "RAiD"
- name: "CORS"
schemes:
- https
paths:
  /:
    get:
      tags:
      - "RAiD"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/APIVersionModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            responseTemplates:
              application/json: "{\"version\": \"3.0-Alpha\"}"
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        passthroughBehavior: "when_no_match"
        type: "mock"
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD:
    post:
      tags:
      - "RAiD"
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - in: "body"
        name: "body"
        description: "Optional parameters that are added to the RAiD"
        schema:
          $ref: "#/definitions/RAiDCreateModel"
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/RAiDModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CreateRaidFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD/{raidId}:
    get:
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
      - name: "lazy_load"
        in: "query"
        description: "(Default True) Do not include attached RAiD providers unless value is set to false"
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/RAiDModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /RAiD/{raidId}/providers:
    get:
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "ascending"
        in: "query"
        required: false
        type: "string"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ProviderRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetRaidProvidersFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    post:
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Optional parameters that are added when a provider joins a RAiD"
        schema:
          $ref: "#/definitions/CreateProviderAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ProviderRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CreateRaidProviderAssociationFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    delete:
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      consumes:
      - "application/json"
      produces:
      - application/json
      parameters:
      - name: raidId
        in: path
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Optional parameters that are used when removing a provider"
        schema:
          $ref: "#/definitions/EndProviderAssociationModel"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ProviderRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.EndRaidProviderAssociationFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /provider/{providerId}:
    get:
      tags:
      - "RAiD"
      x-amazon-apigateway-auth:
        type: aws_iam
      produces:
      - application/json
      parameters:
      - name: providerId
        in: path
        required: true
        type: string
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "ascending"
        in: "query"
        required: false
        type: "string"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/ProviderRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetProviderRaidsFunction}/invocations
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /owner:
    get:
      tags:
      - "RAiD"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "limit"
        in: "query"
        required: false
        type: "string"
      - name: "ascending"
        in: "query"
        required: false
        type: "string"
      - name: "exclusiveStartKey"
        in: "query"
        required: false
        type: "string"
      responses:
        200:
          description: "200 response"
          schema:
            $ref: "#/definitions/OwnerRAiDsModel"
          headers:
            Access-Control-Allow-Origin:
              type: "string"
      security:
      - CustomAuthorizerJwt: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        uri: arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.GetOwnerRaidsFunction}/invocations
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      tags:
      - "CORS"
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        200:
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
securityDefinitions:
  CustomAuthorizerJwt:
    type: "apiKey"
    name: "Authorization"
    in: "header"
    x-amazon-apigateway-authtype: "custom"
    x-amazon-apigateway-authorizer:
      authorizerCredentials: "arn:aws:iam::<<account>>:role/${stageVariables.CustomAuthorizerRole}"
      authorizerResultTtlInSeconds: 300
      identityValidationExpression: "^[A-Za-z0-9-_=]+\\.[A-Za-z0-9-_=]+\\.?[A-Za-z0-9-_.+\\\
          /=]*$"
      authorizerUri: "arn:aws:apigateway:<<region>>:lambda:path/2015-03-31/functions/arn:aws:lambda:<<region>>:<<account>>:function:${stageVariables.CustomAuthorizer}/invocations"
      type: "token"
definitions:
  Empty:
    type: object
    title: Empty Schema
  APIVersionModel:
    type: "object"
    properties:
      version:
        type: "string"
    description: "API Version Summary"
  RAiDModel:
    type: "object"
    properties:
      owner:
        type: "string"
        description: "Provider that created the RAiD handle"
      startDate:
        type: "string"
        description: "RAiD start datetime (yyyy-MM-dd hh:mm:ss)"
      endDate:
        type: "string"
        description: "(optional) RAiD end Datetime (yyyy-MM-dd hh:mm:ss)"
      creationDate:
        type: "string"
        description: "RAiD created datetime (yyyy-MM-dd hh:mm:ss)"
      handle:
        type: "string"
        description: "Unique URL hanlde, Example: http://hdl.handle.net/10.1000/860"
      providers:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          type: "object"
          properties:
            startDate:
              type: "string"
              description: "Datetime the provider associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            endDate:
              type: "string"
              description: "(optional) Datetime the provider dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            provider:
              type: "string"
              description: "Name of provider"
      meta:
        type: "object"
        description: "Object that acts as a document for optional metadata KeyValues"
  OwnerRAiDsModel:
    type: "object"
    properties:
      count:
        type: "string"
        description: "Number of items returned"
      items:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          type: "object"
          properties:
            owner:
              type: "string"
              description: "Provider that created the RAiD handle"
            startDate:
              type: "string"
              description: "Datetime the provider associated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            creationDate:
              type: "string"
              description: "RAiD created datetime (yyyy-MM-dd hh:mm:ss)"
            handle:
              type: "string"
              description: "Unique URL hanlde, Example: http://hdl.handle.net/10.1000/860"
      scannedCount:
        type: "string"
        description: "Total number of items that were scanned in the query"
  ProviderRAiDsModel:
    type: "object"
    properties:
      count:
        type: "string"
        description: "Number of items returned"
      items:
        type: "array"
        description: "(optional) Providers associated to the RAiD"
        items:
          type: "object"
          properties:
            startDate:
              type: "string"
              description: "Datetime the provider should be classified as joining the RAiD (yyyy-MM-dd hh:mm:ss)"
            endDate:
              type: "string"
              description: "(optional) Datetime the provider dissociated with the RAiD  (yyyy-MM-dd hh:mm:ss)"
            handle:
              type: "string"
              description: "Unique URL hanlde, Example: http://hdl.handle.net/10.1000/860"
            provider:
              type: "string"
              description: "Name of provider"
      scannedCount:
        type: "string"
        description: "Total number of items that were scanned in the query"
  RAiDCreateModel:
    type: "object"
    properties:
      startDate:
        type: "string"
        description: "Datetime the RAiD should be classified as started (yyyy-MM-dd hh:mm:ss)"
      meta:
        type: "string"
  CreateProviderAssociationModel:
    type: "object"
    properties:
      startDate:
        type: "string"
        description: "Datetime the provider should be classified as joining the RAiD (yyyy-MM-dd hh:mm:ss)"
      provider:
        type: "string"
        description: "Name of the provider"
  EndProviderAssociationModel:
    type: "object"
    properties:
      endDate:
        type: "string"
        description: "Datetime the provider should be classified as dissociating from the RAiD (yyyy-MM-dd hh:mm:ss)"
