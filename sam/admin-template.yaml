# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file template.yaml \
# --output-template-file template-out.yaml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \
# --template-file <path-to-file>/template-out.yaml \
# --stack-name <STACK_NAME> \
# --parameter-overrides Tracing=Active JwtSecret=<TOKEN_SECRET> ProviderMetadataTable=<<>>\
# --capabilities CAPABILITY_IAM
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: RAiD administrative AWS resources

Parameters:
  Tracing:
    Type: String
    Default: Active
    AllowedValues:
      - Active
      - PassThrough
  JwtIssuer:
    Type: String
    Default: https://www.raid.org.au
  JwtAudience:
    Type: String
    Default: https://api.raid.org.au
  JwtSecret:
    Type: String
  ProviderMetadataTable:
    Type: String

Resources:
  # IAM
  CrudLambdaIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                    - "apigateway.amazonaws.com"
  CrudLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CrudLambdaIAMRole]
    Properties:
      PolicyName: CrudLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "sts:AssumeRole",
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "lambda:InvokeFunction",
            "lambda:CreateEventSourceMapping",
            "ec2:DescribeNetworkInterfaces", 
            "ec2:CreateNetworkInterface", 
            "ec2:DeleteNetworkInterface",
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem"
          ]
          Resource: ["*"]
        - Effect: Allow
          Action: ["es:ESHttpPost"]
          Resource: ["*"]
      Roles: [!Ref CrudLambdaIAMRole]
  # Admin API
  AdminApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: admin-swagger.yaml
      StageName: v1
      Variables:
        CreateProviderFunction: !Ref CreateProvider
        GetProviderFunction: !Ref GetProvider
        UpdateProviderFunction: !Ref UpdateProvider
        DeleteProviderFunction: !Ref DeleteProvider
        CreateProviderKeyFunction: !Ref CreateProviderKey
        GetProviderKeysFunction: !Ref GetProviderKeys
        DeleteProviderKeyFunction: !Ref DeleteProviderKey
  # Provider Metadata Admin CRUD Resources
  CreateProviderLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - CreateProviderKey
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateProvider
      Principal: apigateway.amazonaws.com
  CreateProvider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.create_provider_metadata_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  UpdateProviderLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - UpdateProvider
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref UpdateProvider
      Principal: apigateway.amazonaws.com
  UpdateProvider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.update_provider_metadata_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  DeleteProviderLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - DeleteProvider
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteProvider
      Principal: apigateway.amazonaws.com
  DeleteProvider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.delete_provider_metadata_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  GetProviderLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - GetProvider
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetProvider
      Principal: apigateway.amazonaws.com
  GetProvider:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.get_provider_metadata_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  # Provider Key CRUD Resources
  CreateProviderKeyLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - CreateProviderKey
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref CreateProviderKey
      Principal: apigateway.amazonaws.com
  CreateProviderKey:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.create_provider_key_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  DeleteProviderKeyLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - DeleteProviderKey
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref DeleteProviderKey
      Principal: apigateway.amazonaws.com
  DeleteProviderKey:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.delete_provider_key_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  GetProviderKeysLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - AdminApi
    - GetProviderKeys
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetProviderKeys
      Principal: apigateway.amazonaws.com
  GetProviderKeys:
    Type: AWS::Serverless::Function
    Properties:
      Handler: raid_admin.get_provider_keys_handler
      Runtime: python2.7
      CodeUri: ../src
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          PROVIDER_TABLE: !Ref ServiceTable
          PROVIDER_METADATA_TABLE: !Ref ProviderMetadataTable
          JWT_ISSUER: !Ref JwtIssuer
          JWT_AUDIENCE: !Ref JwtAudience
          JWT_SECRET: !Ref JwtSecret
  # Service Resources
  ServiceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "Name"
          AttributeType: "S"
        -
          AttributeName: "Date"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Name"
          KeyType: "HASH"
        -
          AttributeName: "Date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  # Institution Resources
  InstitutionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "Name"
          AttributeType: "S"
        -
          AttributeName: "Grid"
          AttributeType: "S"
        -
          AttributeName: "Date"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Grid"
          KeyType: "HASH"
        -
          AttributeName: "Date"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI"
          KeySchema:
            -
              AttributeName: "Name"
              KeyType: "HASH"
            -
              AttributeName: "Date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "Token"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  InstitutionCrudLambda:
      Type: 'AWS::Serverless::Function'
      Properties:
        Handler: raid_admin.institution_crud_handler
        Runtime: python2.7
        CodeUri: ../src
        Description: ''
        MemorySize: 128
        Timeout: 30
        Role: !GetAtt InstitutionCrudIAMRole.Arn
        Environment:
          Variables:
            INSTITUTION_TABLE:
               Ref: InstitutionTable
            JWT_ISSUER:
              Ref: JwtIssuer
            JWT_AUDIENCE:
              Ref: JwtAudience
            JWT_SECRET:
              Ref: JwtSecret
  InstitutionCrudIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Sid: "AllowLambdaServiceToAssumeRole"
                  Effect: "Allow"
                  Action:
                    - "sts:AssumeRole"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
  InstitutionLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [InstitutionCrudIAMRole, InstitutionTable]
    Properties:
      PolicyName: InstitutionLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "dynamodb:*"
          ]
          Resource: [!GetAtt InstitutionTable.Arn]
      Roles: [!Ref InstitutionCrudIAMRole]


Outputs:
  InstitutionKeys:
    Value: !Ref 'InstitutionTable'
  ProviderKeys:
    Value: !Ref 'ServiceTable'
  AdminApi:
    Value: !Ref 'AdminApi'
  
