# NOTE: Before using this template, replace the <<region>> and <<account>> fields
#       in Lambda integration URI in the swagger file to region and accountId 
#       you are deploying to
#
# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file template.yaml \
# --output-template-file template-out.yaml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \=
# --template-file <path-to-file>/template-out.yaml \
# --stack-name <STACK_NAME>  \
# --parameter-overrides JwtSecret=<<jwt-secret>> AndsService=<<ands_service>> AndsAppId=<<app_id>> AndsSubnets=<<subnet1,subnet2>> AndsSecurityGroups=<<sg1,sg1>>\
# --capabilities CAPABILITY_IAM
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: RAiD AWS resources

Parameters:
  Tracing:
    Type: String
    Default: Active
    AllowedValues:
      - Active
      - PassThrough
  JwtIssuerSelf:
    Type: String
    Default: https://www.raid.org.au
  JwtIssuerThirdParty:
    Type: String
    Default: https://rapid.aaf.edu.au
  JwtAudience:
    Type: String
    Default: https://api.raid.org.au
  JwtSecret:
    Type: String
  ProviderRole:
    Type: String
    Default: service
  InstitutionRole:
    Type: String
    Default: institution
  AndsService:
    Type: String
  AndsAppId:
    Type: String
  AndsSubnets:
    Type: CommaDelimitedList
    Description: "Comma seperated subnet ids that have access to ANDS handle minting service"
  AndsSecurityGroups:
    Type: CommaDelimitedList
    Description: "Comma seperated security group ids that have inbound/outbound access to ANDS handle minting service"

Resources:
  # API
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: swagger.yaml
      StageName: Prod
      Variables:
        CustomAuthorizer: !Ref CustomAuthorizer
        CustomAuthorizerRole: !Ref CustomAuthorizerRole

        CreateRaidFunction: !Ref CreateRaid
        UpdateRaidContentPathFunction: !Ref UpdateRaidContentPath
        GetRaidFunction: !Ref GetRaid

        GetOwnerRaidsFunction: !Ref GetOwnerRaids
        UpdateRaidOwnerFunction: !Ref UpdateRaidOwner
        GetProviderRaidsFunction: !Ref GetProviderRaids
        GetRaidProvidersFunction: !Ref GetRaidProviders
        CreateRaidProviderAssociationFunction: !Ref CreateRaidProviderAssociation
        EndRaidProviderAssociationFunction: !Ref EndRaidProviderAssociation

        GetInstitutionRaidsFunction: !Ref GetInstitutionRaids
        GetRaidInstitutionsFunction: !Ref GetRaidInstitutions
        CreateRaidInstitutionAssociationFunction: !Ref CreateRaidInstitutionAssociation
        EndRaidInstitutionAssociationFunction: !Ref EndRaidInstitutionAssociation
        
        
  # IAM
  ## General
  LogsXrayLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CustomAuthorizerRole, CrudLambdaIAMRole]
    Properties:
      PolicyName: GeneralLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords"
          ]
          Resource: ["*"]
      Roles: [!Ref CustomAuthorizerRole, !Ref CrudLambdaIAMRole]

  CrudLambdaIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                    - "apigateway.amazonaws.com"
  CrudLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CrudLambdaIAMRole]
    Properties:
      PolicyName: CrudLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "ec2:DescribeNetworkInterfaces", 
            "ec2:CreateNetworkInterface", 
            "ec2:DeleteNetworkInterface",
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem"

          ]
          Resource: ["*"]
      Roles: [!Ref CrudLambdaIAMRole]
  
  ## Custom Authorizer
  CustomAuthorizerRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                    - "apigateway.amazonaws.com"
  CustomAuthorizerPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CustomAuthorizerRole]
    Properties: 
      PolicyName: AuthorizerPolicy
      PolicyDocument:
        Statement:
        -
          Effect: Allow
          Action: [
            "lambda:InvokeFunction",
            "lambda:CreateEventSourceMapping",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:GetBucketVersioning"
          ]
          Resource: "*"
      Roles: [!Ref CustomAuthorizerRole]

  # Serverless
  ## Custom Authorizer
  CustomAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: auth.jwt_validation_handler
      Runtime: python2.7
      Role: !GetAtt CustomAuthorizerRole.Arn
      Environment:
        Variables:
          JWT_ISSUER_SELF:
            Ref: JwtIssuerSelf
          JWT_ISSUER_3RD_PARTY:
            Ref: JwtIssuerThirdParty
          JWT_AUDIENCE:
            Ref: JwtAudience
          JWT_SECRET:
            Ref: JwtSecret
          PROVIDER_ROLE:
            Ref: ProviderRole
          INSTITUTION_ROLE:
            Ref: InstitutionRole
  ## RAiD CRUD
  CreateRaid:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.create_handler
      Runtime: python2.7
      Timeout: 10
      Role: !GetAtt CrudLambdaIAMRole.Arn
      VpcConfig:
        SecurityGroupIds:
          Ref: AndsSecurityGroups
        SubnetIds:
          Ref: AndsSubnets
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
          ANDS_SERVICE: !Ref AndsService
          ANDS_APP_ID: !Ref AndsAppId          
      Events:
        CreateRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD
            Method: POST
  UpdateRaidContentPath:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.update_content_path_handler
      Runtime: python2.7
      Timeout: 10
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
          ANDS_SERVICE: !Ref AndsService
          ANDS_APP_ID: !Ref AndsAppId    
      Events:
        UpdateRaidContentPathHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/handle
            Method: PUT
  GetRaid:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.get_raid_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
          INSTITUTION_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidInstitutionDB
          INSTITUTION_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidInstitutionDB
      Events:
        GetRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}
            Method: GET
  ### Providers
  GetOwnerRaids:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.get_owner_raids_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
      Events:
        GetOwnerRaidsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /owner
            Method: GET
  UpdateRaidOwner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.update_raid_owner_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
      Events:
        UpdateRaidOwnerHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /owner/{raidId}
            Method: PUT
  GetProviderRaids:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.get_provider_raids_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
      Events:
        GetProviderRaidsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /provider/{providerId}
            Method: GET
  GetRaidProviders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.get_raid_providers_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
      Events:
        GetRaidProvidersHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/providers
            Method: GET
  CreateRaidProviderAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.create_raid_provider_association_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
      Events:
        CreateRaidProviderAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/providers
            Method: POST
  EndRaidProviderAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.end_raid_provider_association_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          PROVIDER_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
          PROVIDER_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
      Events:
        EndRaidProviderAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/providers
            Method: DELETE
  ### Institutions
  GetInstitutionRaids:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.get_institution_raids_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          INSTITUTION_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidInstitutionDB
          INSTITUTION_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidInstitutionDB
      Events:
        GetInstitutionRaidsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /institution/{grid}
            Method: GET
  GetRaidInstitutions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.get_raid_institutions_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          INSTITUTION_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidInstitutionDB
          INSTITUTION_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidInstitutionDB
      Events:
        GetRaidInstitutionsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/institutions
            Method: GET
  CreateRaidInstitutionAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.create_raid_institution_association_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          INSTITUTION_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidInstitutionDB
          INSTITUTION_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidInstitutionDB
      Events:
        CreateRaidInstitutionAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/institutions
            Method: POST
  EndRaidInstitutionAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../src
      Handler: raid.end_raid_institution_association_handler
      Runtime: python2.7
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
          RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
          INSTITUTION_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidInstitutionDB
          INSTITUTION_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidInstitutionDB
      Events:
        EndRaidInstitutionAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/institutions
            Method: DELETE
  # Database
  RAiDDemoDB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: database-template.yaml
  RAiDLiveDB:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL: database-template.yaml
Outputs:
  RaidDemoDB:
    Value: !GetAtt RAiDDemoDB.Outputs.RaidDB
  RaidDemoProviderDB:
    Value: !GetAtt RAiDDemoDB.Outputs.RaidProviderDB
  RaidDemoInstitutionDB:
    Value: !GetAtt RAiDDemoDB.Outputs.RaidInstitutionDB
  RaidLiveDB:
    Value: !GetAtt RAiDLiveDB.Outputs.RaidDB
  RaidLiveProviderDB:
    Value: !GetAtt RAiDLiveDB.Outputs.RaidProviderDB
  RaidLiveInstitutionDB:
    Value: !GetAtt RAiDLiveDB.Outputs.RaidInstitutionDB
