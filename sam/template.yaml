# NOTE: Before using this template, replace the <<region>> and <<account>> fields
#       in Lambda integration URI in the swagger file to region and accountId
#       you are deploying to
#
# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file template.yaml \
# --output-template-file template-out.yaml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \=
# --template-file <path-to-file>/template-out.yaml \
# --stack-name <STACK_NAME>  \
# --parameter-overrides JwtSecret=<<jwt-secret>> \
#       AndsService=<<ands_service>> \
#       DemoAndsService=<<ands_service>> \
#       AndsAppId=<<app_id>> \
#       AndsSecurityGroups=<<sg1,sg1>> \
#       ElasticsearchHost=<<....ap-southeast-2.es.amazonaws.com>> \
#       AndsSecret=<<>> \
#       AndsDemoSecret=<<>> \
# --capabilities CAPABILITY_IAM
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: RAiD AWS resources

Parameters:
  Tracing:
    Type: String
    Default: Active
    AllowedValues:
      - Active
      - PassThrough
  JwtIssuerSelf:
    Type: String
    Default: https://www.raid.org.au
  JwtIssuerThirdParty:
    Type: String
    Default: https://rapid.aaf.edu.au
  JwtAudience:
    Type: String
    Default: https://api.raid.org.au
  JwtSecret:
    Type: String
  ProviderRole:
    Type: String
    Default: service
  InstitutionRole:
    Type: String
    Default: institution
  AndsService:
    Type: String
  DemoAndsService:
    Type: String
  AndsAppId:
    Type: String
  AndsSecret:
    Type: String
  AndsDemoSecret:
    Type: String
  OrcidInstitutionKey:
    Type: String
  DemoOrcidInstitutionKey:
    Type: String
  OrcidInstitutionSecret:
    Type: String
  DemoOrcidInstitutionSecret:
    Type: String
  OrcidRedirectUri:
    Type: String
    Default: "https://api.raid.org.au/v1/auth/orcid"
  DemoOrcidRedirectUri:
    Type: String
    Default: "https://api.raid.org.au/v1/auth/orcid/demo"
  OrcidAuthSuccessUri:
    Type: String
    Default: "https://ui.api.raid.org.au/orcid/success"
  OrcidAuthErrorUri:
    Type: String
    Default: "https://ui.api.raid.org.au/orcid/error"
  ElasticsearchHost:
    Type: String
  SesEmailSender:
    Type: String
  SesEmailRegion:
    Type: String
    Default: us-west-2
  HandleAlarmThreshold:
    Type: String
    Default: 80
    Description: "The minimum safe queue depth threshold before more ANDS Handles should be minted"

Globals:
  Function:
    Runtime: python2.7
    Timeout: 30
    MemorySize: 512
    Environment:
      Variables:
        JWT_ISSUER_SELF:
          Ref: JwtIssuerSelf
        JWT_ISSUER_3RD_PARTY:
          Ref: JwtIssuerThirdParty
        JWT_AUDIENCE:
          Ref: JwtAudience
        JWT_SECRET:
          Ref: JwtSecret
        PROVIDER_ROLE:
          Ref: ProviderRole
        INSTITUTION_ROLE:
          Ref: InstitutionRole
        ANDS_SERVICE:
          Ref: AndsService
        DEMO_ANDS_SERVICE:
          Ref: DemoAndsService
        ANDS_APP_ID:
          Ref: AndsAppId
        ANDS_SECRET:
          Ref: AndsSecret
        ANDS_DEMO_SECRET:
          Ref: AndsDemoSecret
        RAID_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidDB
        RAID_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidDB
        ASSOCIATION_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RAiDAssociationDB
        ASSOCIATION_TABLE: !GetAtt RAiDLiveDB.Outputs.RAiDAssociationDB
        METADATA_TABLE: !Ref MetadataTable
        ANDS_HANDLES_QUEUE: !Ref AndsHandlesQueue
        DEMO_ANDS_HANDLES_QUEUE: !Ref DemoAndsHandlesQueue
        ANDS_HANDLE_ALARM_TOPIC: !Ref AndsHandleAlarmTopic
        DEMO_ANDS_HANDLE_ALARM_TOPIC: !Ref DemoAndsHandleAlarmTopic
        CONTRIBUTORS_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.ContributorsDB
        CONTRIBUTORS_TABLE: !GetAtt RAiDLiveDB.Outputs.ContributorsDB
        CONTRIBUTOR_INVITATIONS_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.ContributorInvitationsDB
        CONTRIBUTOR_INVITATIONS_TABLE: !GetAtt RAiDLiveDB.Outputs.ContributorInvitationsDB
        RAID_CONTRIBUTORS_DEMO_TABLE: !GetAtt RAiDDemoDB.Outputs.RaidContributorsDB
        RAID_CONTRIBUTORS_TABLE: !GetAtt RAiDLiveDB.Outputs.RaidContributorsDB

Resources:
  # Encryption
  RAiDKmsKey:
    Type: "AWS::KMS::Key"
    Properties:
      Description: Key for encrypting sensitive contributor details
      Enabled: "true"
      KeyPolicy:
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Join
                - ":"
                - - "arn:aws:iam:"
                  - Ref: "AWS::AccountId"
                  - root
            Action:
              - "kms:*"
            Resource:
              - "*"
        Version: "2012-10-17"
  # API
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: swagger-out.yaml
      StageName: v1
      Variables:
        CustomAuthorizer: !Ref CustomAuthorizer
        CustomAuthorizerRole: !Ref CustomAuthorizerRole
        AuthenticateTokenFunction: !Ref AuthenticateToken
        CreateRaidFunction: !Ref CreateRaid
        UpdateRaidFunction: !Ref UpdateRaid
        GetRaidsFunction: !Ref GetRaids
        GetRaidFunction: !Ref GetRaid
        GetOwnerRaidsFunction: !Ref GetOwnerRaids
        UpdateRaidOwnerFunction: !Ref UpdateRaidOwner
        GetRaidProvidersFunction: !Ref GetRaidProviders
        CreateRaidProviderAssociationFunction: !Ref CreateRaidProviderAssociation
        EndRaidProviderAssociationFunction: !Ref EndRaidProviderAssociation
        GetRaidInstitutionsFunction: !Ref GetRaidInstitutions
        CreateRaidInstitutionAssociationFunction: !Ref CreateRaidInstitutionAssociation
        EndRaidInstitutionAssociationFunction: !Ref EndRaidInstitutionAssociation
        GetRaidPublicFunction: !Ref GetRaidPublic
        RedirectRaidContentPathFunction: !Ref RedirectRaidContentPath
        GetProvidersFunction: !Ref GetProviders
        GetInstitutionsFunction: !Ref GetInstitutions
        AddRaidContributorFunction: !Ref AddRaidContributor
        InviteContributorFunction: !Ref InviteContributor
        AuthenticateContributorFunction: !Ref AuthenticateContributor
        GetRaidContributorsFunction: !Ref GetRaidContributors
        UpdateRaidContributorFunction: !Ref UpdateRaidContributor
        EndRaidContributorFunction: !Ref EndRaidContributor
  # IAM
  ## General
  AwsLambdaNetworkPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
        PolicyDocument:
            Version: 2012-10-17
            Statement:
                - Effect: Allow
                  Action: [
                    "ec2:DescribeNetworkInterfaces",
                    "ec2:CreateNetworkInterface",
                    "ec2:DeleteNetworkInterface",
                  ]
                  Resource: '*'

  LogsXrayLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CustomAuthorizerRole, CrudLambdaIAMRole]
    Properties:
      PolicyName: GeneralLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords"
          ]
          Resource: ["*"]
      Roles: [!Ref CustomAuthorizerRole, !Ref CrudLambdaIAMRole]

  CrudLambdaIAMRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                    - "apigateway.amazonaws.com"
  CrudLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CrudLambdaIAMRole]
    Properties:
      PolicyName: CrudLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "ec2:DescribeNetworkInterfaces",
            "ec2:CreateNetworkInterface",
            "ec2:DeleteNetworkInterface",
            "dynamodb:BatchGetItem",
            "dynamodb:BatchWriteItem",
            "dynamodb:DeleteItem",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:UpdateItem",
            "sqs:ReceiveMessage",
            "sqs:DeleteMessage",
            "sqs:GetQueueAttributes",
            "sqs:SendMessage"
          ]
          Resource: ["*"]
        - Effect: Allow
          Action: ["es:ESHttpPost"]
          Resource: ["*"]
      Roles: [!Ref CrudLambdaIAMRole]

  KmsLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CrudLambdaIAMRole]
    Properties:
      PolicyName: KmsPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action:
            - "kms:Encrypt"
            - "kms:Decrypt"
            - "kms:ReEncrypt*"
            - "kms:GenerateDataKey*"
            - "kms:DescribeKey"
          Resource:
            - !GetAtt RAiDKmsKey.Arn

      Roles: [!Ref CrudLambdaIAMRole]

  SendEmailPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CrudLambdaIAMRole]
    Properties:
      PolicyName: SendEmailPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "ses:SendEmail",
            "ses:SendRawEmail"
          ]
          Resource: ["*"]
      Roles: [!Ref CrudLambdaIAMRole]

  ## Custom Authorizer
  CustomAuthorizerRole:
      Type: "AWS::IAM::Role"
      Properties:
          Path: "/"
          AssumeRolePolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "sts:AssumeRole"
                Principal:
                  Service:
                    - "lambda.amazonaws.com"
                    - "apigateway.amazonaws.com"
  CustomAuthorizerPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [CustomAuthorizerRole]
    Properties:
      PolicyName: AuthorizerPolicy
      PolicyDocument:
        Statement:
        -
          Effect: Allow
          Action: [
            "lambda:InvokeFunction",
            "lambda:CreateEventSourceMapping",
            "s3:GetObject",
            "s3:GetObjectVersion",
            "s3:GetBucketVersioning"
          ]
          Resource: "*"
      Roles: [!Ref CustomAuthorizerRole]

  # Serverless
  ## Custom Authorizer
  CustomAuthorizer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.auth_handlers.custom_authorisation_handler
      Role: !GetAtt CustomAuthorizerRole.Arn

  ## Authenticate Token
  AuthenticateToken:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.auth_handlers.authenticate_token_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        AuthenticateTokenHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /auth
            Method: POST

  AuthenticateContributor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.authenticate_contributor
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          RAID_KMS_KEY: !Ref RAiDKmsKey
          ORCID_INTERACTION_QUEUE: !Ref OrcidInteractionQueue
          DEMO_ORCID_INTERACTION_QUEUE: !Ref DemoOrcidInteractionQueue
          ORCID_REDIRECT_URL: !Ref OrcidRedirectUri
          DEMO_ORCID_REDIRECT_URL: !Ref  DemoOrcidRedirectUri
          ORCID_AUTH_SUCCESS_URL: !Ref OrcidAuthSuccessUri
          ORCID_AUTH_ERROR_URL: !Ref OrcidAuthErrorUri
          ORCID_INSTITUTION_KEY: !Ref OrcidInstitutionKey
          DEMO_ORCID_INSTITUTION_KEY: !Ref DemoOrcidInstitutionKey
          ORCID_INSTITUTION_SECRET: !Ref OrcidInstitutionSecret
          DEMO_ORCID_INSTITUTION_SECRET: !Ref DemoOrcidInstitutionSecret
      Events:
        AuthenticateContributorHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /auth/orcid
            Method: GET
        AuthenticateDemoContributorHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /auth/orcid/demo
            Method: GET

  ## RAiD Public
  GetRaidPublic:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.raid_public_handlers.get_raid_public_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /handle/{raidId}
            Method: GET
  RedirectRaidContentPath:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.raid_public_handlers.redirect_raid_path_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /handle/{raidId}/redirect
            Method: GET
  ## RAiD
  GetRaids:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.raid_handlers.get_raids_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetProviderRaidsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD
            Method: GET
  CreateRaid:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.raid_handlers.create_raid_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      MemorySize: 1024
      Tracing: Active
      Events:
        CreateRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD
            Method: POST
        RunHotTimer:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  UpdateRaid:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.raid_handlers.update_raid
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Tracing: Active
      Events:
        UpdateRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}
            Method: PUT
        RunHotTimer:
          Type: Schedule
          Properties:
            Schedule: rate(1 minute)
  GetRaid:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.raid_handlers.get_raid_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}
            Method: GET
  ### Owner
  GetOwnerRaids:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.owner_handlers.get_owner_raids_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetOwnerRaidsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /owner
            Method: GET
  UpdateRaidOwner:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.owner_handlers.update_raid_owner_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        UpdateRaidOwnerHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /owner/{raidId}
            Method: PUT
  ### Providers
  GetProviders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.provider_handlers.get_providers_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidProvidersHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /providers
            Method: GET
  GetRaidProviders:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.provider_handlers.get_raid_providers_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidProvidersHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/providers
            Method: GET
  CreateRaidProviderAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.provider_handlers.create_raid_provider_association_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        CreateRaidProviderAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/providers
            Method: POST
  EndRaidProviderAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.provider_handlers.end_raid_provider_association_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        EndRaidProviderAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/providers
            Method: DELETE
  ### Institutions
  GetInstitutions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.institution_handlers.get_institutions_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidProvidersHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /institutions
            Method: GET
  GetRaidInstitutions:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.institution_handlers.get_raid_institutions_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidInstitutionsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/institutions
            Method: GET
  CreateRaidInstitutionAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.institution_handlers.create_raid_institution_association_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        CreateRaidInstitutionAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/institutions
            Method: POST
  EndRaidInstitutionAssociation:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.institution_handlers.end_raid_institution_association_handler
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        EndRaidInstitutionAssociationHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/institutions
            Method: DELETE

  ### Contributors
  InviteContributor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.invite_contributor
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          EMAILS_QUEUE: !Ref EmailsQueue
      Events:
        InviteContributorHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /contributors
            Method: POST

  AddRaidContributor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.add_contributor
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          ORCID_INTERACTION_QUEUE: !Ref OrcidInteractionQueue
          DEMO_ORCID_INTERACTION_QUEUE: !Ref DemoOrcidInteractionQueue
          EMAILS_QUEUE: !Ref EmailsQueue
      Events:
        AddRaidContributorHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/contributors
            Method: POST

  GetRaidContributors:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.get_raid_contributors
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Events:
        GetRaidContributorsHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/contributors
            Method: GET

  UpdateRaidContributor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.update_raid_contributor
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          ORCID_INTERACTION_QUEUE: !Ref OrcidInteractionQueue
          DEMO_ORCID_INTERACTION_QUEUE: !Ref DemoOrcidInteractionQueue
      Events:
        UpdateRaidContributorHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/contributors/{orcid}
            Method: PUT

  EndRaidContributor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.end_raid_contributor
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          ORCID_INTERACTION_QUEUE: !Ref OrcidInteractionQueue
          DEMO_ORCID_INTERACTION_QUEUE: !Ref DemoOrcidInteractionQueue
      Events:
        EndRaidContributorHandle:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /RAiD/{raidId}/contributors/{orcid}
            Method: DELETE

  # RAiD Table DynamoDB monitor that can update the content path with ANDS
  RaidDynamoDBProcessStream:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Timeout: 300
      Handler: handlers.db_streams.raid_table_dynamodb_stream_event
      MemorySize: 1024
      Policies: !Ref AwsLambdaNetworkPolicy
      Environment:
        Variables:
          DEMO_RAID_STREAM_ARN: !GetAtt RAiDDemoDB.Outputs.RaidDBStreamArn
          RAID_STREAM_ARN: !GetAtt RAiDLiveDB.Outputs.RaidDBStreamArn
      Events:
        RaidDemoTableStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt RAiDDemoDB.Outputs.RaidDBStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 50
        RaidTableStream:
          Type: DynamoDB
          Properties:
            Stream: !GetAtt RAiDLiveDB.Outputs.RaidDBStreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 50

  # ANDS Handle Creator, storing in SQS and DynamoDB
  CreateAndsHandles:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Timeout: 300
      Handler: handlers.ands_handlers.create_ands_handles_from_event
      Role: !GetAtt CrudLambdaIAMRole.Arn
      MemorySize: 1024
      Events:
        AndsHandleAlarm:
          Type: SNS
          Properties:
            Topic: !Ref AndsHandleAlarmTopic
        DemoAndsHandleAlarm:
          Type: SNS
          Properties:
            Topic: !Ref DemoAndsHandleAlarmTopic

  # Orcid Interactions
  OrcidInteractionProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.orcid_handlers.process_queue
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          ORCID_INTERACTION_QUEUE: !GetAtt OrcidInteractionQueue.Arn
          DEMO_ORCID_INTERACTION_QUEUE: !GetAtt DemoOrcidInteractionQueue.Arn
          RAID_KMS_KEY: !Ref RAiDKmsKey
          ORCID_INSTITUTION_KEY: !Ref OrcidInstitutionKey
          DEMO_ORCID_INSTITUTION_KEY: !Ref DemoOrcidInstitutionKey
          ORCID_INSTITUTION_SECRET: !Ref OrcidInstitutionSecret
          DEMO_ORCID_INSTITUTION_SECRET: !Ref DemoOrcidInstitutionSecret
      Events:
        OrcidInteractionQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt OrcidInteractionQueue.Arn
            BatchSize: 10
        DemoOrcidInteractionQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt DemoOrcidInteractionQueue.Arn
            BatchSize: 10

  # Email Interactions
  EmailProcessor:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ../build
      Handler: handlers.contributor_handlers.process_email_queue
      Role: !GetAtt CrudLambdaIAMRole.Arn
      Environment:
        Variables:
          ORCID_REDIRECT_URL: !Ref OrcidRedirectUri
          DEMO_ORCID_REDIRECT_URL: !Ref  DemoOrcidRedirectUri
          ORCID_INSTITUTION_KEY: !Ref OrcidInstitutionKey
          DEMO_ORCID_INSTITUTION_KEY: !Ref DemoOrcidInstitutionKey
          SES_EMAIL_SENDER: !Ref SesEmailSender
          SES_EMAIL_REGION: !Ref SesEmailRegion
      Events:
        EmailsQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailsQueue.Arn
            BatchSize: 10

  # Queues
  AndsHandlesQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600  # 14 days

  DemoAndsHandlesQueue:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600  # 14 days

  OrcidInteractionQueue:
    Type: AWS::SQS::Queue

  DemoOrcidInteractionQueue:
    Type: AWS::SQS::Queue

  EmailsQueue:
    Type: AWS::SQS::Queue

  # Alarms and Notifications
  AndsHandleAlarmTopic:
    Type: AWS::SNS::Topic

  AndsHandleQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if queue depth gets below N messages"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value : { "Fn::GetAtt" : [ "AndsHandlesQueue", "QueueName"] }
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold:
        Ref: HandleAlarmThreshold
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - Ref: AndsHandleAlarmTopic

  DemoAndsHandleAlarmTopic:
    Type: AWS::SNS::Topic

  DemoAndsHandleQueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: "Alarm if queue depth gets below N messages"
      Namespace: "AWS/SQS"
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value : { "Fn::GetAtt" : [ "DemoAndsHandlesQueue", "QueueName"] }
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold:
        Ref: HandleAlarmThreshold
      ComparisonOperator: LessThanOrEqualToThreshold
      AlarmActions:
        - Ref: DemoAndsHandleAlarmTopic

  # Database
  ## Unused Handles table
  AndsHandlesTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      AttributeDefinitions:
        -
          AttributeName: "environment"
          AttributeType: "S"
        -
          AttributeName: "handle"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "environment"
          KeyType: "HASH"
        -
          AttributeName: "handle"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1

  ## Metadata table
  MetadataTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "name"
          AttributeType: "S"
        -
          AttributeName: "type"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "name"
          KeyType: "HASH"
      GlobalSecondaryIndexes:
        -
          IndexName: "type"
          KeySchema:
            -
              AttributeName: "type"
              KeyType: "HASH"
            -
              AttributeName: "name"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "grid"
              - "isni"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ## JWT token table
  TokenTable:
    Type: "AWS::DynamoDB::Table"
    DependsOn: MetadataTable
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "name"
          AttributeType: "S"
        -
          AttributeName: "dateCreated"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "name"
          KeyType: "HASH"
        -
          AttributeName: "dateCreated"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ## RAiD
  RAiDDemoDB:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: TokenTable
    Properties:
      TemplateURL: database-template.yaml
  RAiDLiveDB:
    Type: "AWS::CloudFormation::Stack"
    DependsOn: RAiDDemoDB
    Properties:
      TemplateURL: database-template.yaml
Outputs:
  RaidDemoDB:
    Value: !GetAtt RAiDDemoDB.Outputs.RaidDB
  RaidLiveDB:
    Value: !GetAtt RAiDLiveDB.Outputs.RaidDB
  RAiDAssociationDemoDB:
    Value: !GetAtt RAiDDemoDB.Outputs.RAiDAssociationDB
  RAiDAssociationLiveDB:
    Value: !GetAtt RAiDLiveDB.Outputs.RAiDAssociationDB
  MetadataDB:
    Value: !Ref MetadataTable
  TokenDB:
    Value: !Ref TokenTable
