# To deploy for the first time, and for each update,
# run both of the following commands in order:
#
# aws cloudformation package \
# --template-file template.yaml \
# --output-template-file template-out.yaml \
# --s3-bucket <your-s3-bucket-name>
#
# aws cloudformation deploy \
# --template-file <path-to-file>/template-out.yaml \
# --stack-name <STACK_NAME> \
# --parameter-overrides Tracing=Active \
# --capabilities CAPABILITY_IAM
---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Description: RAiD administrative AWS resources

Parameters:
  Tracing:
    Type: String
    Default: Active
    AllowedValues:
      - Active
      - PassThrough
  JwtIssuer:
    Type: String
  JwtAudience:
    Type: String
  JwtSecret:
    Type: String

Resources:
  # Service Resources
  ServiceTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "Name"
          AttributeType: "S"
        -
          AttributeName: "Date"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Name"
          KeyType: "HASH"
        -
          AttributeName: "Date"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  ServiceCrudLambda:
      Type: 'AWS::Serverless::Function'
      Properties:
        Handler: raid_admin.service_crud_handler
        Runtime: python2.7
        CodeUri: ./Deployment
        Description: ''
        MemorySize: 128
        Timeout: 30
        Role: !GetAtt ServiceCrudIAMRole.Arn
        Tracing:
          Ref: Tracing
        Environment:
          Variables:
            SERVICE_TABLE:
               Ref: ServiceTable
            JWT_ISSUER:
              Ref: JwtIssuer
            JWT_AUDIENCE:
              Ref: JwtAudience
            JWT_SECRET:
              Ref: JwtSecret
  ServiceCrudIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Sid: "AllowLambdaServiceToAssumeRole"
                  Effect: "Allow"
                  Action:
                    - "sts:AssumeRole"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
  ServiceLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [ServiceCrudIAMRole, ServiceTable]
    Properties:
      PolicyName: ServiceLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "dynamodb:*"
          ]
          Resource: [!GetAtt ServiceTable.Arn]
      Roles: [!Ref ServiceCrudIAMRole]

  # Institution Resources
  InstitutionTable:
    Type: "AWS::DynamoDB::Table"
    Properties:
      AttributeDefinitions:
        -
          AttributeName: "Name"
          AttributeType: "S"
        -
          AttributeName: "Grid"
          AttributeType: "S"
        -
          AttributeName: "Date"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "Grid"
          KeyType: "HASH"
        -
          AttributeName: "Date"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "GSI"
          KeySchema:
            -
              AttributeName: "Name"
              KeyType: "HASH"
            -
              AttributeName: "Date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "INCLUDE"
            NonKeyAttributes:
              - "Token"
          ProvisionedThroughput:
            ReadCapacityUnits: 5
            WriteCapacityUnits: 5
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
  InstitutionCrudLambda:
      Type: 'AWS::Serverless::Function'
      Properties:
        Handler: raid_admin.institution_crud_handler
        Runtime: python2.7
        CodeUri: ./Deployment
        Description: ''
        MemorySize: 128
        Timeout: 30
        Role: !GetAtt InstitutionCrudIAMRole.Arn
        Tracing:
          Ref: Tracing
        Environment:
          Variables:
            INSTITUTION_TABLE:
               Ref: InstitutionTable
            JWT_ISSUER:
              Ref: JwtIssuer
            JWT_AUDIENCE:
              Ref: JwtAudience
            JWT_SECRET:
              Ref: JwtSecret
  InstitutionCrudIAMRole:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            AssumeRolePolicyDocument:
              Version: "2012-10-17"
              Statement:
                -
                  Sid: "AllowLambdaServiceToAssumeRole"
                  Effect: "Allow"
                  Action:
                    - "sts:AssumeRole"
                  Principal:
                    Service:
                      - "lambda.amazonaws.com"
  InstitutionLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [InstitutionCrudIAMRole, InstitutionTable]
    Properties:
      PolicyName: InstitutionLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "dynamodb:*"
          ]
          Resource: [!GetAtt InstitutionTable.Arn]
      Roles: [!Ref InstitutionCrudIAMRole]

  #  General Resources
  LogsXrayLambdaPolicy:
    Type: "AWS::IAM::Policy"
    DependsOn: [InstitutionCrudIAMRole, ServiceCrudIAMRole]
    Properties:
      PolicyName: LogsXrayLambdaPolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: [
            "logs:CreateLogGroup",
            "logs:CreateLogStream",
            "logs:PutLogEvents",
            "xray:PutTraceSegments",
            "xray:PutTelemetryRecords"
          ]
          Resource: ["*"]
      Roles: [!Ref InstitutionCrudIAMRole, !Ref ServiceCrudIAMRole]
Outputs:
  InstitutionDB:
    Value: !Ref 'InstitutionTable'
  ServicDB:
    Value: !Ref 'ServiceTable'
